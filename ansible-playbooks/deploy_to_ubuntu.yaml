- 
  name: Install podman on ubuntu
  hosts: all
  become: true
  vars: 
    ansible_python_interpreter: /usr/bin/python3
  tasks:
   - name: Add repo
     raw: sudo sh -c "echo 'deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_18.04/ /' > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list"

   - name: Download repo key
     raw: curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_18.04/Release.key | sudo apt-key add -
   
   - name: Update apt-get
     raw: sudo apt-get update -qq
    
   - name: Install podman
     raw: sudo apt-get -qq -y install podman

-
  name: Bootstrap remote nodes with CP4D edge application
  hosts: localhost
  vars:
    webapp_url: "<hub>"
    username: "<hub_username>"
    password: "<hub_password>"
  tasks:
    - name: Authorize to hub instance
      uri:
        url: "https://{{ webapp_url }}/icp4d-api/v1/authorize"
        method: POST
        return_content: yes
        body: "{ \"username\": \"{{ username }}\", \"password\": \"{{ password }}\" }"
        body_format: json
        validate_certs: no
      register: data
      # failed_when: <optional condition based on JSON returned content>

    - name: Parse bearer token from the above response
      set_fact:
        token: "{{data.json.token}}"
    
    - name: Download RPM
      uri:
        url: "https://{{ webapp_url }}/edge-core/v1/edge_applications/installer"
        dest: /tmp/cp4d_edge_installer.rpm
        method: GET
        validate_certs: no
        headers:
          Authorization: "Bearer {{token}}"

    - name: Download Certs
      uri:
        url: "https://{{ webapp_url }}/edge-core/v1/edge_applications/certs"
        dest: /tmp/certs.tar
        method: GET
        validate_certs: no
        headers:
          Authorization: "Bearer {{token}}"
    
-
### Set hub_version environment variable to 3.x or 4.x depending on the Openshift cluster version
  name: Deploy and install edge bedrock
  hosts: all
  become: true
  vars:
    ansible_python_interpreter: /usr/bin/python3
    hub_version: "4.x"
    logrotate:
      edge_file: /etc/logrotate.d/edge
  tasks:
    - name: Add edge app logrotate rules
      template:
        src: logrotate_edge.j2
        dest: "{{ logrotate.edge_file }}"
        owner: root
        group: root
        mode: '0644'
        force: yes
    - name: Set up log rotate cron
      cron:
        name: Hourly log rotation
        minute: "0"
        hour: "*"
        user: root
        job: "/usr/sbin/logrotate {{ logrotate.edge_file }} > /dev/null"
    - name: Upload RPM to the edge node
      copy:
        src: /tmp/cp4d_edge_installer.rpm
        dest: /tmp
    - name: Upload Certs to the edge node
      unarchive:
        src: /tmp/certs.tar
        dest: /tmp
    - name: Install alien
      apt: 
        name: alien
        state: present
    - name: Convert rpm to deb package
      raw: sudo alien -k /tmp/cp4d_edge_installer.rpm
    - name: Extract deb package
      shell: "apt install /root/cpd-edge_1.0.0-1_all.deb"

#### For IEAM nodes, add an environment variable ENABLE_IEAM here assigned to any value. Absence indicates installation of an non-IEAM edge node.
    - name: Start the coreapi server
      shell: bash /ibm/cp4d-edge-app/bin/scripts/setup_edge.sh
      environment: 
        #ENABLE_IEAM: "true"
        CERTS_DIR: "/tmp/certs"
        HUB_VERSION: "{{ hub_version }}"
        EDGEHOST: "{{hostvars[inventory_hostname]['ansible_default_ipv4']['address']}}"
    - name: Waiting for setup to complete
      pause:
        seconds: 10
    - name: Tether the edge node to Hub instance
      uri:
        url: "https://127.0.0.1:4444/v1/edge_systems"
        method: PUT
        return_content: yes
        body:
          display_name: "{{hostvars[inventory_hostname]['ansible_default_ipv4']['address']}}"
        body_format: json
        validate_certs: no
        headers:
          Authorization: "Bearer {{hostvars['localhost']['token']}}"
      register: data

-
  name: Cleanup of local node
  hosts: localhost
  tasks:
    - name: Removing
      file:
        path: "{{ item }}"
        state: absent
      with_items:
      - /tmp/certs.tar
      - /tmp/cp4d_edge_installer.rpm

- 
  name: Cleanup of remote node
  hosts: all
  vars:
    ansible_python_interpreter: /usr/bin/python3
  tasks:
    - name: Cleanup of remote node
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - /tmp/certs.tar
        - /tmp/certs
        - /tmp/cp4d_edge_installer.rpm
        - /root/cpd-edge_1.0.0-1_all.deb